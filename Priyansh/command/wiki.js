const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports.config = {
    name: "imdb",
    version: "1.0.6",
    hasPermission: 0,
    credits: "MirryKal",
    description: "Find movie or series details from IMDb",
    commandCategory: "search",
    usages: "[movie/series name]",
    cooldowns: 3
};

module.exports.run = async ({ event, args, api }) => {
    if (!args.length) {
        return api.sendMessage("‚ùó ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§´‡§º‡§ø‡§≤‡•ç‡§Æ ‡§Ø‡§æ ‡§∏‡•Ä‡§∞‡•Ä‡§ú‡§º ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç!", event.threadID, event.messageID);
    }

    const query = args.join(" ");
    const apiKey = "8f50e26e"; // ‡§Ö‡§™‡§®‡§æ IMDb API Key ‡§°‡§æ‡§≤‡•á‡§Ç
    const url = `http://www.omdbapi.com/?t=${encodeURIComponent(query)}&apikey=${apiKey}`;

    try {
        const response = await axios.get(url);
        const data = response.data;

        if (data.Response === "False") {
            return api.sendMessage(`‚ùå IMDb ‡§™‡§∞ *${query}* ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡•ã‡§à ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§`, event.threadID, event.messageID);
        }

        // üé¨ ‡§™‡§π‡§≤‡•á Movie Info ‡§≠‡•á‡§ú‡•á‡§Ç
        const message = `üé¨ *${data.Title}* (${data.Year})\n‚≠ê IMDB ‡§∞‡•á‡§ü‡§ø‡§Ç‡§ó: ${data.imdbRating}/10\nüé≠ Genre: ${data.Genre}\nüé¨ ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü‡§∞: ${data.Director}\nüìú ‡§ï‡§π‡§æ‡§®‡•Ä: ${data.Plot}\nüåç ‡§¶‡•á‡§∂: ${data.Country}\n\nüîó IMDb: https://www.imdb.com/title/${data.imdbID}/`;
        api.sendMessage(message, event.threadID, event.messageID);

        // üé• ‡§Ö‡§ó‡§∞ Poster ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à ‡§§‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§î‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç
        if (data.Poster && data.Poster !== "N/A") {
            const cacheDir = path.join(__dirname, "cache");
            if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir); // ‡§Ö‡§ó‡§∞ cache ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§§‡•ã ‡§¨‡§®‡§æ ‡§≤‡•ã

            const filePath = path.join(cacheDir, `${data.Title.replace(/[^a-zA-Z0-9]/g, "_")}.jpg`);

            const writer = fs.createWriteStream(filePath);
            const imageResponse = await axios({
                url: data.Poster,
                method: "GET",
                responseType: "stream"
            });

            imageResponse.data.pipe(writer);

            writer.on("finish", () => {
                api.sendMessage({ body: "üéû Movie Poster:", attachment: fs.createReadStream(filePath) }, event.threadID, () => {
                    setTimeout(() => {
                        fs.unlink(filePath, (err) => {
                            if (err) console.error("‚ùå Poster delete failed:", err);
                        });
                    }, 5000); // 5 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§¨‡§æ‡§¶ ‡§ë‡§ü‡•ã-‡§°‡§ø‡§≤‡•Ä‡§ü
                });
            });

            writer.on("error", (err) => {
                console.error(err);
                api.sendMessage("‚ö†Ô∏è Poster ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü ‡§∞‡§π‡•Ä ‡§π‡•à!", event.threadID, event.messageID);
            });
        }
    } catch (error) {
        console.error(error);
        return api.sendMessage("‚ö†Ô∏è IMDb API ‡§∏‡•á ‡§°‡•á‡§ü‡§æ ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç!", event.threadID, event.messageID);
    }
};
